//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Virus
//  @ File Name : PipelineElementPathologyVirusCls.h
//  @ Date : 2019/8/15
//  @ Author : weiping liu
//
//


#if !defined(_PIPELINEELEMENTPATHOLOGYVIRUSCLS_H)
#define _PIPELINEELEMENTPATHOLOGYVIRUSCLS_H
#include <iostream>
#include <string>
#include <map>

#include "tensorflow/core/framework/tensor.h"
#include <opencv2/opencv.hpp>

#include "PipelineAlgorithmExecutor.h"
#include "IFPipelineImagesIn.h"
//#include "PipelinePathologyVirus_export.h"
#include "InferLocalPathologyVirus.h"

#include "PipelineElementAlgorithmMachineLearningBase.h"
#include "IFPipelinePathologyVirusIn.h"
#include "IFPipelinePathologyVirusTemp.h"
#include "IFPipelinePathologyVirusOut.h"
#include "PipelineElementPathologyVirusPostProc.h"

namespace ALPHA
{
	namespace VIRUS
	{

		class PipelineElementPathologyVirusCls : public COMM::PipelineElementAlgorithmMachineLearningBase
		{
		public:
			explicit PipelineElementPathologyVirusCls();
			~PipelineElementPathologyVirusCls() override;
			void setInput(std::shared_ptr< COMM::DataObj > Input) override;
			std::shared_ptr<COMM::DataObj> getOutput() override;
			void tensor2Det(float conf_thresh = 0.2);


		protected:
			void preproc() override;
			void infer() override;
			void postproc() override;
			//void saveJson(float target_conf_the = 0.2, float target_num_the = 0);
			//void  IFPipelinePathologyVirusOut::dumpJson();
		private:
			std::shared_ptr<IFPipelinePathologyIn> ptrInterfaceData;
			std::shared_ptr<IFPipelinePathologyVirusOut> detectionOut;
			std::shared_ptr<IFPipelinePathologyVirusTemp> virusOut;
			COMM::DataObj* ptrInterfaceDataOut;
			Post_processing postProcessor;

		};
	}
}


#endif  //_PIPELINEELEMENTPATHOLOGYVIRUSCLS_H
