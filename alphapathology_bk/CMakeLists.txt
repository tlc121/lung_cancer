################################################################################
#    COPYRIGHT aitrox, 2019
#    All rights are reserved. Reproduction in whole or in part is   
#    prohibited without the written consent of the copyright owner. 
#
#    primary author(s):
#        LIU Weiping        liuwp@fosun.com
#        Xu peng
#        Liu Ji
#    file history:
#        23st May, 2019 generated by LIU Weiping
#    affiliation(s):
#        alg
#    introduction:
#        
##################################################################################

cmake_minimum_required(VERSION 3.8)
project(ALPHA)
################################################################################
# Version information
################################################################################
set(VERSION_INFO_MAJOR  4)
set(VERSION_INFO_MINOR  54)
set(VERSION_INFO_PATCH  0)
set(VERSION_INFO_POINT  0)

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/version.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/version.h
    @ONLY
)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# Indicate that this is a top-level build
set(ALPHA_TOP_LEVEL_BUILD ON)
SET(SOURCECODE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
# output dir
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/BIN)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/BIN)
option(ENABLE_VALGRIND_TEST
		   "Set CMAKE_CXX_FLAGS for valgrind use"
		   OFF
	)
	
FIND_PACKAGE( OpenMP REQUIRED)
if(OPENMP_FOUND)
    message("OPENMP FOUND")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif(OPENMP_FOUND)

#FIND_PACKAGE(Python3 REQUIRED)
FIND_PACKAGE(PythonLibs 3 REQUIRED)

include(conanbuildinfo.cmake)
conan_basic_setup()


#####################################################################
# Choose which major modules to build
#####################################################################
option(ENABLE_COMMON_BUILD
       "Build the common module"
       ON
)

option(ENABLE_PTROSE_BUILD
		"Build the pathology ROSE module"
		ON
)
option(ENABLE_PTVIRUS_BUILD
		"Build the pathology virus module"
		ON
)
option(ENABLE_PTTCT_BUILD
    "Build the pathology TCT module"
        ON
)
option(ENABLE_PATHOLOGY_BUILD
    "Build the pathology utility module"
        ON
)
option(ENABLE_PTLUNGCANCER_BUILD
    "Build the pathology lungcancer module"
        ON
)
option(ENABLE_PTPDL1_BUILD
    "Build the pathology pdl1 module"
        ON
)
option(ENABLE_PTXS_BUILD
    "Build the pathology xs module"
        ON
)
option(ENABLE_PTFEIAI_BUILD
    "Build the pathology feiai module"
        ON
)



#####################################################################
# Flag for development version vs tagged release
#####################################################################
option(TAGGED_RELEASE
       "Indicates that this is a tagged release.  Drops '-git' flag."
       OFF
)

if(TAGGED_RELEASE)
    set(VERSION_INFO_EXTRA "")
else(TAGGED_RELEASE)
    set(VERSION_INFO_EXTRA "git")
endif(TAGGED_RELEASE)

#####################################################################
# Choose shared or static library  to build
#####################################################################
include (GenerateExportHeader)

option(BUILD_SHARED_LIBS 
       "Build shared instead of static library" 
       ON
)

#####################################################################
# Build module
#####################################################################

if(ENABLE_COMMON_BUILD)
    add_subdirectory(common)
else(ENABLE_COMMON_BUILD)
    message(STATUS "Skipping common module build")
endif(ENABLE_COMMON_BUILD)


##pathology projects
if(ENABLE_PTROSE_BUILD)
	add_subdirectory(ptROSE)
else(ENABLE_PTROSE_BUILD)
	message(STATUS "Skipping ptROSE module build")
endif(ENABLE_PTROSE_BUILD)

if (ENABLE_PTVIRUS_BUILD)
	add_subdirectory(ptVirus)
else(ENABLE_PTVIRUS_BUILD)
	message(STATUS "Skipping pathology virus module build")
endif(ENABLE_PTVIRUS_BUILD)

if (ENABLE_PTTCT_BUILD)
	add_subdirectory(ptTCT)
else(ENABLE_PTTCT_BUILD)
	message(STATUS "Skipping pathology TCT module build")
endif(ENABLE_PTTCT_BUILD)

if (ENABLE_PATHOLOGY_BUILD)
	add_subdirectory(Pathology)
else(ENABLE_PATHOLOGY_BUILD)
	message(STATUS "Skipping pathology Utility module build")
endif(ENABLE_PATHOLOGY_BUILD)

if(ENABLE_PTLUNGCANCER_BUILD)
	add_subdirectory(ptLungCancer)
else(ENABLE_PTLUNGCANCER_BUILD)
	message(STATUS "Skipping ptLungCancer module build")
endif(ENABLE_PTLUNGCANCER_BUILD)

if(ENABLE_PTPDL1_BUILD)
	add_subdirectory(ptPDL1)
else(ENABLE_PTPDL1_BUILD)
	message(STATUS "Skipping ptPDL1 module build")
endif(ENABLE_PTPDL1_BUILD)

if(ENABLE_PTXS_BUILD)
	add_subdirectory(ptXS)
else(ENABLE_PTXS_BUILD)
	message(STATUS "Skipping ptXS module build")
endif(ENABLE_PTXS_BUILD)

if(ENABLE_PTFEIAI_BUILD)
	add_subdirectory(ptFeiai)
else(ENABLE_PTFEIAI_BUILD)
	message(STATUS "Skipping ptFeiai module build")
endif(ENABLE_PTFEIAI_BUILD)


#message(STATUS "Alpha version: ${VERSION_INFO}")
include (InstallRequiredSystemLibraries)
set (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
set (CPACK_PACKAGE_VERSION_MAJOR "${VERSION_INFO_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${VERSION_INFO_MINOR}")
include (CPack)

install (FILES ${CMAKE_CURRENT_BINARY_DIR}/version.h
    DESTINATION include)
