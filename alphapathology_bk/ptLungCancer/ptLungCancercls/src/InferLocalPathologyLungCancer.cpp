//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : LungCancer
//  @ File Name : InferLocalPathologyLungCancer.cpp
//  @ Date : 2019/8/15
//  @ Author : weiping liu
//
//

#include <memory>
#include "DataObj.h"
#include "InferLocalPathologyLungCancer.h"
#include <vector>

namespace ALPHA
{
	namespace LungCancer
	{
		InferLocalPathologyLungCancer::InferLocalPathologyLungCancer() : COMM::InferLocalBase()
		{

		}

		InferLocalPathologyLungCancer::~InferLocalPathologyLungCancer()
		{

		}

		

	//**********************************************************************************************************************
		COMM::DataObj* InferLocalPathologyLungCancer::predict(COMM::DataObj* dataObj, const std::string& modelName)
		{
			IFPipelinePathologyLungCancerIn* input_LungCancer = dynamic_cast<IFPipelinePathologyLungCancerIn*>(dataObj);
			IFPipelinePathologyLungCancerOut* output_LungCancer(new IFPipelinePathologyLungCancerOut());
			int cut_width = 1912;
			int cut_height = 1210;
			std::string config_path =  input_LungCancer->m_config_path;
			if (input_LungCancer->m_format_dismatch)
			{
				output_LungCancer->format_wrong = true;
				return output_LungCancer;
			}
			LOG4CPLUS_INFO(COMM::MyLogger::getInstance()->m_rootLog, "Start reading svs: " << input_LungCancer->m_svs_path.c_str());

			if (!openslide_can_open(input_LungCancer->m_svs_path.c_str())) {
				LOG4CPLUS_ERROR(COMM::MyLogger::getInstance()->m_rootLog, " Image is broken ");
				output_LungCancer->file_broken = true;
				return output_LungCancer;
			}


			openslide_t* slide = openslide_open(input_LungCancer->m_svs_path.c_str());
			if (openslide_get_error(slide) != NULL)
			{
				openslide_close(slide);
				std::cout << "slide corruption" << std::endl;
				LOG4CPLUS_ERROR(COMM::MyLogger::getInstance()->m_rootLog, "Could not read slide.");
				output_LungCancer->file_broken = true;
				return output_LungCancer;
			}
			else
			{
				LOG4CPLUS_INFO(COMM::MyLogger::getInstance()->m_rootLog, "Load slide success.");
			}
			ALPHA::LungCancer::IOThread io(input_LungCancer, slide, cut_width, cut_height);
			ALPHA::LungCancer::AIThread ai(config_path, output_LungCancer, &io);
			io.startThread();
			ai.startThread();
			io.m_run_thread->join();
			openslide_close(slide);
			LOG4CPLUS_INFO(COMM::MyLogger::getInstance()->m_rootLog, "Return results");
			return output_LungCancer;
		}
	}
}