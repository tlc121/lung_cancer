//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : FEIAI
//  @ File Name : PipelinePathologyFEIAI.cpp
//  @ Date : 2019/8/15
//  @ Author : weiping liu
//
//


#include "PipelinePathologyFEIAI.h"
#include "IFPipelinePathologyFEIAIOut.h"
#include "PipelineElementPathologyFEIAICls.h"
#include "CommonUtils.h"
#include "IFPipelinePathologyFEIAIIn.h"
#include "tensorflow/cc/ops/image_ops.h"
#include "tensorflow/cc/ops/standard_ops.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/framework/tensor.h"
#include "tensorflow/core/graph/default_device.h"
#include "tensorflow/core/graph/graph_def_builder.h"
#include "tensorflow/core/platform/logging.h"
#include "tensorflow/core/platform/types.h"
#include "tensorflow/core/public/session.h"

//class tensorflow_operator
//{
//public:
//	tensorflow::Session* session_cls;
//};

namespace ALPHA
{
	namespace FEIAI
	{
		PipelinePathologyFEIAI::PipelinePathologyFEIAI(std::string config_path) :COMM::PipelineAlgorithmExecutor(),
			ptrPipelineIn(nullptr), ptrPipelineOut(nullptr)
		{
			this->m_config_path = config_path;
			//this->m_operator = new tensorflow_operator;
		}

		PipelinePathologyFEIAI::~PipelinePathologyFEIAI()
		{
			/*if (m_operator != NULL)
				delete m_operator;*/

		}

		void PipelinePathologyFEIAI::setUpPipeline()
		{
			//std::cout << "PipelineHemorrhagicStroke::setUpPipeline()" << std::endl;
			LOG4CPLUS_INFO(COMM::MyLogger::getInstance()->m_rootLog, "PipelinePathologyFEIAI::setUpPipeline()!");

			// step 1: classification
			std::shared_ptr<FEIAI::PipelineElementPathologyFEIAICls>
				ptrPipelineElementPathologyFEIAICls(new PipelineElementPathologyFEIAICls());
			listElement.push_back(ptrPipelineElementPathologyFEIAICls);

		}


		void PipelinePathologyFEIAI::executePipeline()
		{
			//std::cout << "PipelineHemorrhagicStroke::executePipeline()" << std::endl;
			//std::list<std::shared_ptr<PipelineElementBase>> listElement;
			std::list<std::shared_ptr<COMM::PipelineElementBase>>::iterator
				itPre = listElement.begin();
			auto itCurr = itPre;
			if (itCurr != listElement.end())
			{
				++itCurr;
			}
			else
			{
				LOG4CPLUS_ERROR(COMM::MyLogger::getInstance()->m_rootLog, "PipelinePathologyFEIAI need at least one algorithmElement! Quite pipeline computation!");
				return;
			}
			if (ptrPipelineIn == nullptr)
			{
				LOG4CPLUS_ERROR(COMM::MyLogger::getInstance()->m_rootLog, "nullptr input in PipelinePathologyFEIAI! Quite pipeline computation!");
				return;
			}
			(*itPre)->setInput(ptrPipelineIn);
			for (; itCurr != listElement.end(); ++itCurr, ++itPre)
			{
				(*itPre)->update();
				(*itCurr)->setInput((*itPre)->getOutput());
			}
			(*itPre)->update();
			this->ptrPipelineOut = std::dynamic_pointer_cast<IFPipelinePathologyFEIAIOut>((*itPre)->getOutput());
		}

		void PipelinePathologyFEIAI::setInput(std::shared_ptr<COMM::DataObj> Input)
		{
			ptrPipelineIn = std::dynamic_pointer_cast<FEIAI::IFPipelinePathologyFEIAIIn>(Input);
		}

		std::shared_ptr<COMM::DataObj> PipelinePathologyFEIAI::getOutput()
		{
			//TO DO: need to edit for the output

			return ptrPipelineOut;
		}
	}
}